// переменная, которая хранит в себе указатели на все объекты класса semicircle (полукруги)
const semicircles = document.querySelectorAll('.semicircle');
// переменная, которая хранит в себе указатель на класс timer
const timer = document.querySelector('.timer');

// костыль, вводим тут время работы таймера
const hr = 0;
const min = 0;
const sec = 15;

// рассчитываем, сколько времени задано для нашего таймера 
// Js, как и остальные языки программирования, воспринимает время в миллисекундах
// поэтому умножаем секунды на 1000 (1 сек = 1000 миллисек) и так далее
const hours = hr * 3600000;
const minutes = min * 60000;
const seconds = sec * 1000;

// вычисляем, сколько миллисекунд будет отсчитывать наш таймер
const setTime = hours + minutes + seconds;
// устанавливаем время начала отсчета (берем настоящее время в миллисекундах)
const startTime = Date.now();
// устанавливаем время окончания отсчета
const futureTime = startTime + setTime;

// мы зацикливаем функцию таймера, чтобы она вызывалась в каждый момент времени
// Если не сделать этого, то таймер и индикатор не будут двигаться, а замрут в начальном положении
// к сожалению, js не поддерживает функции, которые работают без остановки, поэтому используем такие костыли
// Можешь написать через запятую после countDownTimer какое-нибудь число типа 2000 и поприкалываться 
const timerLoop = setInterval(countDownTimer);
countDownTimer();


// ну и собственно описываем функцию
function countDownTimer () {
    // переменная, в которую мы записываем текущее время каждый раз, когда мы вызываем функцию
    const currentTime = Date.now();
    // вычисляем, сколько времени осталось до конца таймера
    const remainingTime = futureTime - currentTime;
    // вычисляем, на какой угол нужно повернуть полукруги, подробнее ниже
    const angle = (remainingTime / setTime) * 360;

    // КАК ВСЕ ЭТО РАБОТАЕТ
    // Мы имеем три экземляра класса semicircles
    // Для удобства и соответствия коду назовем их [0], [1] и [2]
    // Движение индикатора осуществляется за счет вращения полукругов [0] и [1]
    // В CSS для полукругов задано направление анимации transform-origin: right center;
    // То есть, ось вращения привязана к середине правого края элемента
    // Логика программы состоит в том, что полукруги будут совершать обратный оборот от конца тригонометрической окружности к ее началу
    // Угол оборота обозначается переменной angle
    // Когда функция будет запущена в первый раз, значение angle будет равняться 360, в конце заданного времени - 0
    // Таким образом, выполняя данную функцию в каждый момент времени, мы будем вычислять, на сколько градусов нужно повернуть полукруг

    // Как уже было сказано, мы движемся от конца тригонометрической окружности к ее началу
    // В начале angle = 360, дальше кажду итерацию она будет уменьшаться 
    // Если angle > 180, это значит, что индикатор сейчас находится в левой части круга
    // Все три полукруга изначально расположены в левом углу блока
    // Следуя логике, для того, чтобы из двух полукругов нарисовать круг, нужно разместить один из них в левой части окружности, а другой - в правой
    // Полукруг [0] мы повернем на 180 градусов, задав ему css-свойство с помощью style.transform = `rotate(180deg)`;
    // Таким образом, он окажется в правой части окружности, и в начальный момент времени индикатор будет представлять собой круг
    // Движение индикатора в левой половине будет осуществляться за счет полукруга [1]
    // Каждую итерацию ему будет присваиваться css-свойство, которое будет поворачивать его на величину angle
    // Полукруг [2] в этой половине нам не нужен, поэтому ему мы присваиваем css-свойство display = `none`
    if (angle > 180) {
        semicircles[2].style.display = `none`;
        semicircles[0].style.transform = `rotate(180deg)`;
        semicircles[1].style.transform = `rotate(${angle}deg)`;
    } 
    
    // Если angle станет меньше 180, это означает, что индикатор перешел в правый край блока
    // Теперь мы начинаем одновременно вращать полукруги [0] и [1]
    // Чтобы замаскировать, что мы вращаем [0], мы "прячем" его под полукруг [2]
    // Мы присваиваем ему display = `block`, и, так как он обладает большим значением z-index, чем остальные полукруги, они прячутся под него
    else {
        semicircles[2].style.display = `block`;
        semicircles[0].style.transform = `rotate(${angle}deg)`;
        semicircles[1].style.transform = `rotate(${angle}deg)`;
    }

    // Высчитываем переменные для таймера
    // Берем сколько осталось времени до конца таймера и высчитываем
    const hrs = Math.floor((remainingTime / (1000 * 60 * 60)) % 24).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});
    const mins = Math.floor((remainingTime / (1000 * 60)) % 60).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});
    const secs = Math.floor((remainingTime / 1000) % 60).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});

    // Вставляем html-код в div с классом timer 
    // С помощью этого выводим цифры оставшегося времени
    timer.innerHTML = `
    <div>${hrs}</div>
    <div class="colon">:</div>
    <div>${mins}</div>
    <div class="colon">:</div>
    <div>${secs}</div>
    `;

    // Если времени осталось 5 секунд, красим индикатор и цифры в красный цвет
    if(remainingTime <= 5000) {
        semicircles[0].style.backgroundColor = 'red';
        semicircles[1].style.backgroundColor = 'red';
        timer.style.color = 'red'
    }

    // после того, как время закончилось
    if (remainingTime < 0) {
        // обнуляем интервал (не знаю зачем, абсолютно не влияет на функционал, возможно я чего-то не понял, но оставил как есть в исходном коде)
        clearInterval(timerLoop);
        // делаем полукруги невидимыми
        semicircles[0].style.display = `none`
        semicircles[1].style.display = `none`
        semicircles[2].style.display = `none`

        // выводим в таймере вместо вычисленного выше времени нули, иначе он будет отображать отрицательное время
        timer.innerHTML = `
        <div>00</div>
        <div class="colon">:</div>
        <div>00</div>
        <div class="colon">:</div>
        <div>00</div>
        `;

        // красим циферблат в серый
        timer.style.color = '#ddd'
    }
}